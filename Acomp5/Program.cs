using BenchmarkDotNet.Attributes;
using BenchmarkDotNet.Running;
using QuickGraph;
using QuickGraph.Algorithms;
using System;
using System.Collections.Generic;
using System.Linq;
using Xunit;

namespace Acomp5
{
    public class Program
    {

        public static int[,] Array1 = new int[,] { { 1, 2, 1 }, { 1, 3, 1 }, { 1, 4, 1 }, { 1, 5, 1 }, { 1, 6, 1 }, { 1, 7, 1 }, { 1, 8, 1 }, { 1, 9, 1 }, { 1, 10, 1 }, { 2, 3, 2 }, { 2, 3, 2 }, { 2, 4, 2 }, { 2, 5, 2 }, { 2, 6, 2 }, { 2, 7, 2 }, { 2, 8, 2 }, { 2, 9, 2 }, { 2, 10, 2 } };

        public static int[,] Array2 = new int[,] { { 2, 1, 37 }, { 4, 1, 86 }, { 4, 3, 54 }, { 6, 2, 84 }, { 6, 3, 64 }, { 6, 4, 1 }, { 6, 5, 66 }, { 7, 1, 46 }, { 7, 2, 43 }, { 7, 3, 62 }, { 7, 5, 96 }, { 7, 6, 63 }, { 8, 2, 18 }, { 8, 3, 56 }, { 8, 4, 57 }, { 8, 7, 71 }, { 9, 1, 76 }, { 9, 2, 57 }, { 9, 3, 88 }, { 9, 5, 8 }, { 9, 7, 7 }, { 9, 8, 39 }, { 10, 1, 52 }, { 10, 3, 40 }, { 10, 4, 39 }, { 10, 5, 79 }, { 10, 6, 19 }, { 11, 1, 41 }, { 11, 2, 20 }, { 11, 9, 67 }, { 12, 1, 86 }, { 12, 2, 10 }, { 12, 4, 49 }, { 12, 7, 64 }, { 12, 10, 30 }, { 12, 11, 30 }, { 13, 2, 4 }, { 13, 3, 40 }, { 13, 4, 93 }, { 13, 5, 17 }, { 13, 6, 59 }, { 13, 7, 49 }, { 13, 10, 40 }, { 13, 11, 98 }, { 13, 12, 15 }, { 14, 1, 53 }, { 14, 3, 28 }, { 14, 6, 86 }, { 14, 7, 9 }, { 14, 9, 44 }, { 14, 11, 19 }, { 14, 13, 98 }, { 15, 1, 58 }, { 15, 3, 43 }, { 15, 6, 56 }, { 15, 7, 15 }, { 15, 10, 68 }, { 15, 11, 83 }, { 15, 13, 86 }, { 16, 2, 39 }, { 16, 4, 63 }, { 16, 5, 97 }, { 16, 7, 93 }, { 16, 10, 92 }, { 16, 11, 81 }, { 16, 13, 28 }, { 16, 14, 26 }, { 17, 1, 67 }, { 17, 3, 60 }, { 17, 4, 67 }, { 17, 5, 3 }, { 17, 6, 14 }, { 17, 7, 30 }, { 17, 8, 67 }, { 17, 11, 31 }, { 17, 13, 57 }, { 17, 14, 54 }, { 17, 16, 5 }, { 18, 1, 8 }, { 18, 2, 57 }, { 18, 4, 48 }, { 18, 5, 2 }, { 18, 6, 87 }, { 18, 7, 80 }, { 18, 8, 85 }, { 18, 13, 7 }, { 18, 17, 27 }, { 19, 2, 100 }, { 19, 3, 91 }, { 19, 6, 70 }, { 19, 10, 23 }, { 19, 12, 62 }, { 19, 14, 12 }, { 19, 16, 53 }, { 20, 1, 65 }, { 20, 2, 30 }, { 20, 4, 36 }, { 20, 7, 53 }, { 20, 8, 79 }, { 20, 11, 31 }, { 20, 12, 77 }, { 20, 13, 38 }, { 20, 14, 58 }, { 20, 15, 76 }, { 20, 16, 76 }, { 20, 18, 37 }, { 20, 19, 97 } };

        public static int[,] Array3 = new int[,] { { 2, 1, 8 }, { 3, 2, 83 }, { 4, 1, 99 }, { 4, 2, 1 }, { 5, 1, 28 }, { 5, 2, 23 }, { 5, 3, 54 }, { 5, 4, 37 }, { 6, 1, 8 }, { 6, 2, 97 }, { 6, 3, 41 }, { 6, 4, 5 }, { 6, 5, 61 }, { 7, 1, 27 }, { 7, 2, 25 }, { 7, 5, 21 }, { 8, 1, 72 }, { 8, 4, 77 }, { 8, 5, 24 }, { 8, 7, 79 }, { 9, 3, 12 }, { 9, 4, 60 }, { 9, 8, 85 }, { 10, 1, 49 }, { 10, 3, 28 }, { 10, 4, 62 }, { 10, 6, 66 }, { 10, 7, 10 }, { 11, 6, 99 }, { 11, 8, 23 }, { 11, 10, 29 }, { 12, 2, 70 }, { 12, 4, 6 }, { 12, 7, 24 }, { 12, 8, 72 }, { 12, 9, 75 }, { 12, 10, 29 }, { 12, 11, 47 }, { 13, 1, 13 }, { 13, 3, 41 }, { 13, 5, 50 }, { 13, 7, 45 }, { 13, 10, 100 }, { 13, 11, 82 }, { 14, 2, 81 }, { 14, 8, 47 }, { 14, 12, 100 }, { 15, 4, 14 }, { 15, 5, 77 }, { 15, 7, 59 }, { 15, 8, 24 }, { 15, 9, 60 }, { 15, 10, 31 }, { 15, 11, 35 }, { 15, 12, 19 }, { 15, 13, 40 }, { 16, 5, 100 }, { 16, 7, 30 }, { 16, 9, 11 }, { 16, 10, 45 }, { 16, 11, 8 }, { 16, 14, 90 }, { 16, 15, 81 }, { 17, 2, 63 }, { 17, 3, 88 }, { 17, 5, 45 }, { 17, 7, 93 }, { 17, 9, 77 }, { 17, 11, 96 }, { 17, 13, 6 }, { 17, 15, 15 }, { 17, 16, 27 }, { 18, 5, 5 }, { 18, 6, 92 }, { 18, 7, 81 }, { 18, 9, 1 }, { 18, 13, 37 }, { 18, 14, 9 }, { 18, 15, 28 }, { 18, 16, 20 }, { 19, 1, 9 }, { 19, 3, 33 }, { 19, 4, 21 }, { 19, 5, 97 }, { 19, 7, 32 }, { 19, 8, 5 }, { 19, 9, 12 }, { 19, 11, 87 }, { 19, 13, 100 }, { 19, 14, 85 }, { 19, 18, 42 }, { 20, 7, 26 }, { 20, 8, 93 }, { 20, 9, 77 }, { 20, 10, 83 }, { 20, 12, 44 }, { 20, 14, 92 }, { 20, 19, 42 }, { 21, 3, 55 }, { 21, 4, 39 }, { 21, 5, 49 }, { 21, 7, 81 }, { 21, 8, 61 }, { 21, 9, 36 }, { 21, 14, 1 }, { 21, 16, 29 }, { 21, 17, 81 }, { 21, 20, 21 }, { 22, 6, 5 }, { 22, 7, 40 }, { 22, 10, 13 }, { 22, 11, 94 }, { 22, 15, 64 }, { 22, 17, 55 }, { 22, 20, 50 }, { 23, 1, 22 }, { 23, 3, 94 }, { 23, 7, 86 }, { 23, 8, 17 }, { 23, 9, 36 }, { 23, 13, 33 }, { 23, 22, 94 }, { 24, 2, 44 }, { 24, 4, 64 }, { 24, 9, 10 }, { 24, 10, 65 }, { 24, 11, 42 }, { 24, 13, 93 }, { 24, 14, 4 }, { 24, 15, 68 }, { 24, 18, 37 }, { 24, 19, 88 }, { 24, 20, 64 }, { 24, 22, 54 }, { 25, 10, 18 }, { 25, 11, 23 }, { 25, 12, 45 }, { 25, 13, 64 }, { 25, 14, 75 }, { 25, 16, 67 }, { 25, 19, 57 }, { 25, 20, 4 }, { 25, 22, 96 }, { 25, 24, 9 }, { 26, 1, 78 }, { 26, 2, 74 }, { 26, 4, 64 }, { 26, 5, 26 }, { 26, 6, 27 }, { 26, 7, 98 }, { 26, 10, 53 }, { 26, 14, 52 }, { 26, 15, 76 }, { 26, 16, 46 }, { 26, 17, 21 }, { 26, 19, 32 }, { 26, 20, 79 }, { 26, 21, 71 }, { 26, 25, 99 }, { 27, 1, 76 }, { 27, 2, 14 }, { 27, 3, 93 }, { 27, 6, 32 }, { 27, 7, 85 }, { 27, 10, 76 }, { 27, 11, 51 }, { 27, 13, 59 }, { 27, 14, 58 }, { 27, 15, 87 }, { 27, 16, 98 }, { 27, 21, 28 }, { 27, 22, 95 }, { 27, 23, 25 }, { 27, 24, 5 }, { 27, 26, 17 }, { 28, 1, 48 }, { 28, 2, 99 }, { 28, 3, 88 }, { 28, 6, 2 }, { 28, 7, 70 }, { 28, 8, 26 }, { 28, 9, 33 }, { 28, 10, 4 }, { 28, 12, 7 }, { 28, 13, 47 }, { 28, 14, 83 }, { 28, 15, 91 }, { 28, 16, 97 }, { 28, 17, 7 }, { 28, 18, 86 }, { 28, 26, 25 }, { 28, 27, 95 }, { 29, 6, 91 }, { 29, 7, 51 }, { 29, 8, 55 }, { 29, 9, 54 }, { 29, 11, 83 }, { 29, 14, 31 }, { 29, 15, 51 }, { 29, 18, 54 }, { 29, 20, 86 }, { 29, 23, 53 }, { 29, 25, 51 }, { 29, 26, 89 }, { 29, 27, 97 }, { 30, 1, 88 }, { 30, 4, 82 }, { 30, 5, 77 }, { 30, 8, 50 }, { 30, 9, 55 }, { 30, 10, 16 }, { 30, 11, 73 }, { 30, 12, 86 }, { 30, 14, 56 }, { 30, 15, 27 }, { 30, 16, 92 }, { 30, 19, 11 }, { 30, 20, 7 }, { 30, 22, 97 }, { 30, 23, 29 }, { 30, 26, 32 }, { 30, 27, 70 }, { 30, 29, 32 }, { 31, 1, 74 }, { 31, 4, 47 }, { 31, 5, 21 }, { 31, 6, 71 }, { 31, 10, 47 }, { 31, 11, 39 }, { 31, 12, 62 }, { 31, 13, 67 }, { 31, 14, 42 }, { 31, 15, 74 }, { 31, 20, 7 }, { 31, 22, 76 }, { 31, 25, 64 }, { 31, 29, 89 }, { 32, 1, 96 }, { 32, 4, 38 }, { 32, 6, 74 }, { 32, 7, 97 }, { 32, 8, 54 }, { 32, 10, 15 }, { 32, 11, 57 }, { 32, 13, 57 }, { 32, 14, 69 }, { 32, 15, 77 }, { 32, 16, 76 }, { 32, 17, 40 }, { 32, 18, 4 }, { 32, 19, 60 }, { 32, 21, 90 }, { 32, 24, 49 }, { 32, 25, 55 }, { 32, 26, 61 }, { 32, 28, 83 }, { 32, 29, 35 }, { 32, 31, 79 }, { 33, 1, 59 }, { 33, 2, 47 }, { 33, 3, 26 }, { 33, 5, 17 }, { 33, 8, 46 }, { 33, 12, 64 }, { 33, 13, 62 }, { 33, 17, 91 }, { 33, 20, 52 }, { 33, 22, 65 }, { 33, 23, 8 }, { 33, 24, 16 }, { 33, 27, 26 }, { 33, 30, 96 }, { 33, 31, 83 }, { 34, 2, 17 }, { 34, 6, 90 }, { 34, 7, 68 }, { 34, 8, 17 }, { 34, 10, 82 }, { 34, 11, 43 }, { 34, 12, 7 }, { 34, 13, 83 }, { 34, 15, 52 }, { 34, 18, 55 }, { 34, 20, 72 }, { 34, 21, 45 }, { 34, 24, 50 }, { 34, 25, 92 }, { 34, 27, 68 }, { 34, 28, 53 }, { 34, 31, 17 }, { 34, 32, 19 }, { 35, 1, 3 }, { 35, 2, 50 }, { 35, 3, 38 }, { 35, 4, 28 }, { 35, 5, 77 }, { 35, 6, 4 }, { 35, 8, 25 }, { 35, 11, 79 }, { 35, 13, 67 }, { 35, 14, 92 }, { 35, 16, 42 }, { 35, 20, 24 }, { 35, 22, 14 }, { 35, 28, 23 }, { 35, 29, 33 }, { 35, 30, 14 }, { 35, 31, 86 }, { 35, 32, 35 }, { 35, 33, 6 }, { 36, 1, 84 }, { 36, 2, 48 }, { 36, 3, 30 }, { 36, 7, 15 }, { 36, 9, 7 }, { 36, 10, 69 }, { 36, 14, 70 }, { 36, 19, 61 }, { 36, 21, 67 }, { 36, 23, 57 }, { 36, 24, 38 }, { 36, 25, 20 }, { 36, 27, 36 }, { 36, 28, 90 }, { 36, 29, 44 }, { 36, 30, 43 }, { 36, 32, 22 }, { 36, 34, 81 }, { 36, 35, 62 }, { 37, 2, 53 }, { 37, 4, 39 }, { 37, 7, 11 }, { 37, 9, 99 }, { 37, 13, 2 }, { 37, 14, 12 }, { 37, 15, 17 }, { 37, 17, 47 }, { 37, 19, 12 }, { 37, 20, 82 }, { 37, 25, 85 }, { 37, 26, 44 }, { 37, 31, 62 }, { 37, 33, 57 }, { 37, 35, 44 }, { 38, 2, 81 }, { 38, 4, 79 }, { 38, 5, 58 }, { 38, 9, 99 }, { 38, 11, 31 }, { 38, 12, 74 }, { 38, 13, 69 }, { 38, 14, 96 }, { 38, 15, 74 }, { 38, 17, 90 }, { 38, 21, 14 }, { 38, 22, 85 }, { 38, 23, 69 }, { 38, 24, 19 }, { 38, 25, 3 }, { 38, 27, 95 }, { 38, 28, 42 }, { 38, 29, 72 }, { 38, 33, 71 }, { 38, 34, 97 }, { 38, 35, 51 }, { 38, 36, 62 }, { 39, 2, 37 }, { 39, 3, 69 }, { 39, 4, 57 }, { 39, 8, 88 }, { 39, 9, 3 }, { 39, 10, 7 }, { 39, 11, 30 }, { 39, 14, 36 }, { 39, 18, 21 }, { 39, 20, 83 }, { 39, 21, 14 }, { 39, 23, 22 }, { 39, 24, 72 }, { 39, 25, 14 }, { 39, 26, 23 }, { 39, 27, 40 }, { 39, 29, 75 }, { 39, 32, 3 }, { 39, 33, 52 }, { 39, 34, 57 }, { 39, 35, 67 }, { 40, 3, 56 }, { 40, 6, 43 }, { 40, 8, 58 }, { 40, 9, 48 }, { 40, 10, 48 }, { 40, 15, 90 }, { 40, 16, 100 }, { 40, 17, 24 }, { 40, 18, 93 }, { 40, 19, 90 }, { 40, 21, 32 }, { 40, 23, 11 }, { 40, 24, 81 }, { 40, 27, 34 }, { 40, 29, 48 }, { 40, 30, 72 }, { 40, 31, 85 }, { 40, 32, 74 }, { 40, 34, 62 }, { 40, 35, 4 }, { 40, 36, 100 }, { 40, 38, 16 }, { 40, 39, 38 }, { 41, 3, 23 }, { 41, 7, 96 }, { 41, 8, 43 }, { 41, 9, 87 }, { 41, 14, 72 }, { 41, 15, 51 }, { 41, 19, 6 }, { 41, 22, 100 }, { 41, 26, 70 }, { 41, 28, 7 }, { 41, 30, 75 }, { 41, 32, 92 }, { 41, 35, 69 }, { 41, 36, 52 }, { 41, 37, 100 }, { 41, 39, 15 }, { 41, 40, 4 }, { 42, 2, 94 }, { 42, 4, 26 }, { 42, 5, 55 }, { 42, 7, 87 }, { 42, 8, 15 }, { 42, 11, 99 }, { 42, 13, 100 }, { 42, 14, 69 }, { 42, 18, 54 }, { 42, 19, 52 }, { 42, 23, 71 }, { 42, 24, 3 }, { 42, 25, 16 }, { 42, 27, 47 }, { 42, 28, 49 }, { 42, 29, 78 }, { 42, 31, 87 }, { 42, 32, 8 }, { 42, 33, 48 }, { 42, 34, 37 }, { 42, 37, 87 }, { 42, 39, 79 }, { 42, 41, 59 }, { 43, 2, 40 }, { 43, 9, 33 }, { 43, 12, 73 }, { 43, 13, 57 }, { 43, 14, 8 }, { 43, 17, 95 }, { 43, 20, 34 }, { 43, 21, 12 }, { 43, 22, 35 }, { 43, 23, 93 }, { 43, 26, 21 }, { 43, 27, 14 }, { 43, 28, 44 }, { 43, 29, 8 }, { 43, 32, 50 }, { 43, 36, 77 }, { 43, 37, 23 }, { 43, 39, 43 }, { 43, 40, 32 }, { 44, 2, 3 }, { 44, 3, 46 }, { 44, 6, 27 }, { 44, 7, 11 }, { 44, 8, 26 }, { 44, 9, 83 }, { 44, 15, 32 }, { 44, 17, 96 }, { 44, 20, 21 }, { 44, 21, 56 }, { 44, 22, 9 }, { 44, 23, 59 }, { 44, 24, 91 }, { 44, 25, 56 }, { 44, 27, 31 }, { 44, 30, 97 }, { 44, 32, 98 }, { 44, 33, 83 }, { 44, 34, 48 }, { 44, 35, 5 }, { 44, 36, 11 }, { 44, 40, 52 }, { 44, 41, 82 }, { 44, 43, 100 }, { 45, 3, 36 }, { 45, 5, 71 }, { 45, 6, 83 }, { 45, 9, 28 }, { 45, 10, 65 }, { 45, 11, 17 }, { 45, 12, 80 }, { 45, 13, 38 }, { 45, 14, 2 }, { 45, 19, 96 }, { 45, 20, 8 }, { 45, 21, 91 }, { 45, 23, 70 }, { 45, 24, 34 }, { 45, 25, 66 }, { 45, 26, 76 }, { 45, 27, 52 }, { 45, 29, 49 }, { 45, 34, 58 }, { 45, 37, 5 }, { 45, 39, 42 }, { 45, 40, 35 }, { 45, 41, 93 }, { 45, 44, 71 }, { 46, 5, 26 }, { 46, 6, 38 }, { 46, 7, 96 }, { 46, 11, 97 }, { 46, 12, 17 }, { 46, 18, 47 }, { 46, 19, 12 }, { 46, 22, 79 }, { 46, 23, 78 }, { 46, 25, 15 }, { 46, 27, 38 }, { 46, 30, 85 }, { 46, 33, 6 }, { 46, 35, 16 }, { 46, 38, 20 }, { 46, 39, 58 }, { 46, 41, 84 }, { 46, 44, 17 }, { 47, 2, 52 }, { 47, 5, 9 }, { 47, 10, 27 }, { 47, 11, 15 }, { 47, 14, 94 }, { 47, 16, 80 }, { 47, 17, 20 }, { 47, 20, 66 }, { 47, 21, 93 }, { 47, 22, 91 }, { 47, 26, 86 }, { 47, 29, 87 }, { 47, 30, 6 }, { 47, 32, 79 }, { 47, 33, 93 }, { 47, 34, 24 }, { 47, 35, 2 }, { 47, 36, 6 }, { 47, 38, 60 }, { 47, 40, 97 }, { 47, 42, 68 }, { 47, 44, 2 }, { 47, 45, 74 }, { 47, 46, 1 }, { 48, 4, 86 }, { 48, 5, 77 }, { 48, 7, 63 }, { 48, 9, 35 }, { 48, 12, 85 }, { 48, 16, 36 }, { 48, 17, 74 }, { 48, 19, 10 }, { 48, 20, 63 }, { 48, 22, 99 }, { 48, 23, 75 }, { 48, 24, 27 }, { 48, 30, 80 }, { 48, 31, 28 }, { 48, 32, 9 }, { 48, 34, 30 }, { 48, 36, 84 }, { 48, 37, 31 }, { 48, 38, 10 }, { 48, 39, 39 }, { 48, 42, 91 }, { 48, 43, 93 }, { 48, 45, 91 }, { 49, 2, 89 }, { 49, 3, 11 }, { 49, 7, 36 }, { 49, 10, 58 }, { 49, 11, 25 }, { 49, 14, 30 }, { 49, 18, 37 }, { 49, 19, 94 }, { 49, 21, 12 }, { 49, 23, 55 }, { 49, 24, 44 }, { 49, 25, 88 }, { 49, 26, 79 }, { 49, 27, 25 }, { 49, 29, 76 }, { 49, 31, 95 }, { 49, 33, 42 }, { 49, 34, 93 }, { 49, 35, 3 }, { 49, 36, 73 }, { 49, 37, 22 }, { 49, 39, 20 }, { 49, 42, 4 }, { 49, 43, 12 }, { 49, 44, 58 }, { 49, 45, 48 }, { 49, 47, 83 }, { 50, 1, 62 }, { 50, 6, 100 }, { 50, 7, 64 }, { 50, 8, 48 }, { 50, 9, 48 }, { 50, 11, 18 }, { 50, 12, 83 }, { 50, 13, 99 }, { 50, 15, 50 }, { 50, 17, 76 }, { 50, 19, 77 }, { 50, 20, 12 }, { 50, 22, 16 }, { 50, 23, 4 }, { 50, 26, 20 }, { 50, 28, 94 }, { 50, 30, 57 }, { 50, 32, 63 }, { 50, 33, 88 }, { 50, 34, 10 }, { 50, 35, 47 }, { 50, 37, 45 }, { 50, 38, 73 }, { 50, 39, 3 }, { 50, 49, 5 } };

        public static int[,] Result1 = new int[,] { { 1, 2 }, { 1, 3 }, { 1, 4 }, { 1, 5 }, { 1, 6 }, { 1, 7 }, { 1, 8 }, { 1, 9 }, { 1, 10 } };

        public static int[,] Result2 = new int[,] { { 18, 1 }, { 17, 6 }, { 9, 7 }, { 8, 2 }, { 9, 5 }, { 14, 11 }, { 12, 2 }, { 13, 2 }, { 17, 16 }, { 18, 13 }, { 19, 14 }, { 20, 2 }, { 14, 3 }, { 6, 4 }, { 18, 5 }, { 10, 6 }, { 14, 7 }, { 15, 7 }, { 17, 5 } };

        public static int[,] Result3 = new int[,] { { 35, 1 }, { 49, 3 }, { 4, 2 }, { 18, 5 }, { 35, 6 }, { 10, 7 }, { 12, 4 }, { 24, 14 }, { 17, 13 }, { 42, 24 }, { 27, 26 }, { 27, 24 }, { 28, 6 }, { 46, 33 }, { 34, 12 }, { 47, 35 }, { 47, 36 }, { 45, 37 }, { 38, 25 }, { 50, 39 }, { 49, 42 }, { 43, 14 }, { 44, 2 }, { 47, 44 }, { 49, 35 }, { 19, 8 }, { 39, 9 }, { 28, 10 }, { 15, 4 }, { 41, 19 }, { 21, 14 }, { 47, 30 }, { 31, 20 }, { 39, 32 }, { 48, 32 }, { 30, 20 }, { 22, 6 }, { 50, 23 }, { 25, 20 }, { 40, 35 }, { 41, 40 }, { 45, 14 }, { 47, 46 }, { 16, 11 }, { 16, 9 }, { 43, 29 }, { 18, 9 }, { 37, 13 }, { 50, 49 } };

        public static UndirectedGraph<int, TaggedUndirectedEdge<int, int>> Graph = new UndirectedGraph<int, TaggedUndirectedEdge<int, int>>();

        public class Tests
        {
            [Benchmark]
            public void Test1()
            {
                Program.Test1();
            }

            [Benchmark]
            public void Test2()
            {
                Program.Test2();
            }

            [Benchmark]
            public void Test3()
            {
                Program.Test3();
            }
        }

        [Fact]
        public static void Test1()
        {
            Graph.Clear();
            for (int i = 0; i < Array1.Length / 3; i++)
            {
                Graph.AddVerticesAndEdge(new TaggedUndirectedEdge<int, int>(Array1[i, 0], Array1[i, 1], Array1[i, 2]));
            }
            IEnumerable<TaggedUndirectedEdge<int, int>> Mst = Graph.MinimumSpanningTreeKruskal((TaggedUndirectedEdge<int, int> edge) => Convert.ToDouble(edge.Tag));
            List<TaggedUndirectedEdge<int, int>> List = Mst.ToList();
            bool test = true;
            for (int i = 0; i < Result1.Length / 2; i++)
            {
                test = List.Exists(edge => edge.Source == Result1[i, 0] && edge.Target == Result1[i, 1]);
            }
            Assert.True(test);
        }

        [Fact]
        public static void Test2()
        {
            Graph.Clear();
            for (int i = 0; i < Array2.Length / 3; i++)
            {
                Graph.AddVerticesAndEdge(new TaggedUndirectedEdge<int, int>(Array2[i, 0], Array2[i, 1], Array2[i, 2]));
            }
            IEnumerable<TaggedUndirectedEdge<int, int>> Mst = Graph.MinimumSpanningTreeKruskal(TaggedUndirectedEdge<int, int> edge) => Convert.ToDouble(edge.Tag));
            List<TaggedUndirectedEdge<int, int>> List = Mst.ToList();
            bool test = true;
            for (int i = 0; i < Result2.Length / 2; i++)
            {
                test = List.Exists(edge => edge.Source == Result2[i, 0] && edge.Target == Result2[i, 1]);
            }
            Assert.True(test);
        }

        [Fact]
        public static void Test3()
        {
            Graph.Clear();
            for (int i = 0; i < Array3.Length / 3; i++)
            {
                Graph.AddVerticesAndEdge(new TaggedUndirectedEdge<int, int>(Array3[i, 0], Array3[i, 1], Array3[i, 2]));
            }
            IEnumerable<TaggedUndirectedEdge<int, int>> Mst = Graph.MinimumSpanningTreeKruskal((TaggedUndirectedEdge<int, int> edge) => Convert.ToDouble(edge.Tag));
            List<TaggedUndirectedEdge<int, int>> List = Mst.ToList();
            bool test = true;
            for (int i = 0; i < Result3.Length / 2; i++)
            {
                test = List.Exists(edge => edge.Source == Result3[i, 0] && edge.Target == Result3[i, 1]);
            }
            Assert.True(test);
        }

        static void Main(string[] args)
        {
            BenchmarkRunner.Run<Tests>();
            Console.Read();
        }
    }
}
